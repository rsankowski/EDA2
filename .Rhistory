submit()
extract_numeric("class5")
submit()
students4
submit()
?uniqu
?unique
?unique
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows()
bind_rows(list(passed, failed))
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
?ymd
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds =55)
this_moment
this_moment <- update(this_moment, hours = 1, minutes = 12)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(nyc, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart+hrs(15)+min(50)
arrive <- depart+ hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(IRanges)
browseVignettes("IRanges")
ir <- IRanges(5,10)
ir
Iranges(5, width = 6)
IRanges(5, width = 6)
start(ir)
end(ir)
width(ir)
ir <- IRanges(start =c(3,5,17), end = c(10,8,20))
ir
length(ir)
start(ir)
ir <- IRanges(5,10)
?"intra-range-methods"
shift(ir, -2)
flank(ir, width=3, start=T, both=F) ##
flank(ir, width=3, start=T, both=F) ##
flank(ir, width=3, start=F, both=F) ##start= F makes it 3bp from the end
flank(ir, width=3, start=T, both=T) ##both=True gives both flanking sequences
plotir <- function(ir, i) {arrows(start(ir)-.5, end(ir)+.5,i,code=3
,angle=90, lwd=3)}
plot(0,0,xlim=c(0,15), ylim=c(0,8), type="n", xlab="", xaxt="n")
axis(1,0:15)
abline(v=0:30 + .5, col=rgb(0,0,0,.5))
plotir(ir, 1)
plotir <- function(ir, i) {arrows(start(ir)-.5, end(ir)+.5,i,code=3
,angle=90, lwd=3)}
plot(0,0,xlim=c(0,15), ylim=c(0,8), type="n", xlab="", xaxt="n")
axis(1,0:15)
abline(v=0:30 + .5, col=rgb(0,0,0,.5))
#plotting original range
plotir(ir, 1)
#draw a red shadow for the original IRange
polygon(c(start(ir)-.5, start(ir)-.5, end(ir)+.5, end(ir)+.5),
c(-1.9, 9, -1), col=rab(1.0,0,0,.2), border=NA)
polygon(c(start(ir)-.5, start(ir)-.5, end(ir)+.5, end(ir)+.5),
c(-1.9, 9, -1), col=rab(1,0,0,0,.2), border=NA)
polygon(c(start(ir)-.5, start(ir)-.5, end(ir)+.5, end(ir)+.5),
c(-1,9, 9, -1), col=rab(1,0,0,0,.2), border=NA)
polygon(c(start(ir)-.5, start(ir)-.5, end(ir)+.5, end(ir)+.5),
c(-1,9, 9, -1), col=rgb(1,0,0,0,.2), border=NA)
ir <- IRanges(5,10) ## creates IRange starting at 5 ending at 10
plotir <- function(ir, i) {arrows(start(ir)-.5, end(ir)+.5,i,code=3
,angle=90, lwd=3)}
plot(0,0,xlim=c(0,15), ylim=c(0,8), type="n", xlab="", xaxt="n")
axis(1,0:15)
abline(v=0:30 + .5, col=rgb(0,0,0,.5))
#plotting original range
plotir(ir, 1)
#draw a red shadow for the original IRange
polygon(c(start(ir)-.5, start(ir)-.5, end(ir)+.5, end(ir)+.5),
c(-1,9, 9, -1), col=rgb(1,0,0,0,.2), border=NA)
plotir <- function(ir,i) { arrows(start(ir)-.5,i,end(ir)+.5,i,code=3,angle=90,lwd=3) }
plot(0,0,xlim=c(0,15),ylim=c(0,11),type="n",xlab="",ylab="",xaxt="n")
axis(1,0:15)
abline(v=0:30 + .5,col=rgb(0,0,0,.5))
# plot the original IRange
plotir(ir,1)
# draw a red shadow for the original IRange
polygon(c(start(ir)-.5,start(ir)-.5,end(ir)+.5,end(ir)+.5),c(-1,12,12,-1),col=rgb(1,0,0,.2),border=NA)
plotir(shift(ir,-2), 2)
plotir(narrow(ir, start=2), 3)
plotir(narrow(ir, end=5), 4)
plotir(flank(ir, width=3, start=TRUE, both=FALSE), 5)
plotir(flank(ir, width=3, start=FALSE, both=FALSE), 6)
plotir(flank(ir, width=3, start=TRUE, both=TRUE), 7)
plotir(ir * 2, 8)
plotir(ir + 2, 9)
plotir(ir - 2, 10)
summary(pollution$pm25)
pollution <- read.csv("data/avgpm25.csv", colClasses = c("numeric", "character", "factor", "numeric", "numeric"))
head(pollution)
summary(pollution$pm25)
boxplot(pollution$pm25, col = "blue")
hist(pollution$pm25, col = "green")
hist(pollution$pm25, col = "green")
rug(pollution$pm25)
hist(pollution$pm25, col = "green", breaks = 100)
rug(pollution$pm25)
boxplot(pollution$pm25, col = "blue")
abline(h = 12)
hist(pollution$pm25, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(pollution$pm25), col = "magenta", lwd = 4)
barplot(table(pollution$region), col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
?par
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1)) ##this code arranges the plot screen in a way that you can fit 2 plots
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25, col = region))
abline(h = 12, lwd = 2, lty = 2)
?with
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
with(subset(pollution, region == "west"), plot(latitude, pm25, main = "West"))
with(subset(pollution, region == "east"), plot(latitude, pm25, main = "East"))
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
ir <- IRanges(start=c(3,5,17), end=c(10,8,20))
range(ir)
reduce(ir)
gaps(ir)
disjoin(ir)
library(GenomicRanges)
gr <- GRanges("chrZ", IRanges(start=c(5,10),end=c(35,45)),
strand="+", seqlengths=c(chrZ=100L))
?GRanges
gr
shift(gr, 10)
shift(gr, 80)
trim(shift(gr, 80))
mcols(gr)
mcols(gr)$value <- c(-1,4)
gr
gr2 <- GRanges("chrZ",IRanges(11:13,51:53))
mcols(gr)$value <- NULL
grl <- GRangesList(gr,gr2)
grl
length(grl)
grl[[1]]
mcols(grl)$value <- c(5,7)
grl
mcols(grl)
##findOverlaps and %over%
gr1 <- GRanges("chrZ",IRanges(c(1,11,21,31,41),width=5))
gr2 <- GRanges("chrZ",IRanges(c(19,33),c(38,35)))
gr1
gr2
fo <- findOverlaps(gr1, gr2)
fo
?findOverlaps
queryHits(fo)
subjectHits(fo)
gr1 %over% gr2
gr1[gr1 %over% gr2]
##Rle and Views
r <- Rle(c(1,1,1,0,0,-2,-2,-2,rep(-1,20)))
?Rle
str(r)
as.numeric(r)
Views(r, start=c(4,2), end=c(7,6))
library(datasets)
hist(airquality$Ozone)  ## Draw a new plot
library(datasets)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
gr <- ?GRanges("chrZ", IRanges(start=c(5,10),end=c(35,45)),
gr <- GRanges("chrZ", IRanges(start=c(5,10),end=c(35,45)),
strand="+", seqlengths=c(chrZ=100L))
gr
gr <- GRanges("chrZ", IRanges(start=c(5,10),end=c(35,45)),
strand="+", seqlengths=c(chrZ=100L))
gr
shift(gr, 10)
shift(gr, 80)
trim(shift(gr, 80))
mcols(gr) ## metadata columns
mcols(gr)$value <- c(-1,4)
gr2 <- GRanges("chrZ",IRanges(11:13,51:53))
mcols(gr)$value <- NULL
grl <- GRangesList(gr,gr2) ##Rganges list groups granges together
grl
length(grl)
grl[[1]]
mcols(grl)$value <- c(5,7)
grl
mcols(grl)
##findOverlaps and %over%
gr1 <- GRanges("chrZ",IRanges(c(1,11,21,31,41),width=5))
gr2 <- GRanges("chrZ",IRanges(c(19,33),c(38,35)))
gr1
gr2
fo <- findOverlaps(gr1, gr2)
fo
gr1 %over% gr2
gr1[gr1 %over% gr2]
r <- Rle(c(1,1,1,0,0,-2,-2,-2,rep(-1,20))) ## saves repeated values in a compact form
r
str(r)
as.numeric(r)
Views(r, start=c(4,2), end=c(7,6))
Views(r, start=c(4,2), end=c(7,6)) ##virtual class as a general container for storing a set of views
##ExpressionSet and SummarizedExperiment
library(Biobase)
library(GEOquery)
bioclite("GEOquery")
install.packages("GEOQuery")
library(GEOquery)
library(GEOQuery)
install.packages("GEOquery")
source('http://bioconductor.org/biocLite.R')
biocLite('GEOquery')
library(GEOquery)
geoq <- getGEO("GSE9514") ##downloads an expression set
names(geoq)
e <- geoq[[1]]
dim(e)
exprs(e)[1:3,1:3]
head(exprs(e)[,1])
exprs(e)["10000_ar",] ##if you know the name of the gene you can query it directly
exprs(e)["10000_at",] ##if you know the name of the gene you can query it directly
rownames(e)[1]
pData(e)[1:3,1:6] ##pdata function looks at phenotypic data==columns of dataset
dim(pData(e))
names(pData(e))
pData(e)$characteristics_ch1
as.numeric(pData(e)$characteristics_ch1)
dim(pData(e))
fData(e)[1:3,1:3]
dim(fData(e))
names(fData(e))
head(fData(e)$"Gene Symbol")
head(rownames(e))
experimentData(e)
annotation(e)
library(parathyroidSE)
source('http://bioconductor.org/biocLite.R')
biocLite('parathyroidSE')
library(parathyroidSE)
data(parathyroidGenesSE)
se
se <- parathyroidGenesSE
se
dim(se)
assay(se)[1:3,1:3]
colData(se)[1:3,1:6] ## the col data is the phenotype. meaning each treatment in this data set
dim(colData(se))
names(colData(se))
colData(se)$treatment
rowData(se)[1]
class(rowData(se))
length(rowData(se))
head(rownames(se))
exptData(se)$MIAME
metadata(rowData(se)) ## to access the metadata. telling how the dataset was constructed
exptData(se)$MIAME
abstract(exptData(se)$MIAME)
library(devtools)
install_github("rafalib", "ririzarr")
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
p <- xyplot(Ozone ~ Wind, data = airquality)  ## Nothing happens!
print(p)  ## Plot appears
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2, 1))  ## Plot with 2 panels
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
## Custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call default panel function
panel.lmline(x, y, col = 2)  ## Overlay a simple linear regression line
})
library(datasets)
library(ggplot2)
qplot(carat, price, data = diamonds)
qplot(hwy, cty, data = mpg, geom = "jitter")
qplot(log10(carat), log10(price),
data = diamonds, colour = color) +
geom_smooth(method = "lm")
ggplot(diamonds, aes(log10(carat), log10(price),
colour = color)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(choro, aes(long, lat)) +
geom_polygon(aes(group = group, fill = bin)) +
scale_fill_brewer("Population", labels = c("< 1000" = "0 - 999" , "< 1e4" =
"1,000 - 9,999", "< 1e5" = "10,000 - 99,999", "< 1e6" = "100,000 -
999,999", "< 1e7" = "1,000,000+"), palette = "Blues") +
scale_x_continuous("") +
scale_y_continuous("") +
coord_map()
SA<-read.csv("~/Desktop/Strategies Analysis/DSA01/DSA05R.csv")
library('tree')
head(SA)
dim(SA)
sapply(SA[1,],class)
SA$Rotation<-as.numeric(SA$Rotation)
SA$Error<-as.numeric(SA$Error)
SA$Strategy<-as.factor(SA$Strategy)
sapply(SA[1,],class)
SA<-SA[complete.cases(SA),]
sapply(SA[1,],class)
dim(SA)
x<- SA$Strategy
y<- SA$Latency
z<- SA$Error
plot(z, log(y)
plot(z, log(y))
plot(z, log(y))
plot(log(z), log(y))
plot(log(z), y)
plot(z, y)
hist(log(z))
hist(log(y))
log(3)
log(0)
z1 <-z+0.5
plot(log(z1, y))
plot(log(z1), y)
plot(log(z1), log(y)
plot(log(z1), log(y))
plot(log(z1), log(y))
z1 <-z+1
plot(log(z1), log(y))
.5
plot(log(z1), log(y))
z1 <-z+0.5
plot(log(z1), log(y))
str(mpg)
qplot(displ, hwy, data = mpg) ## plotting mpg data
qplot(log(z1), log(y), color = SA$strategy)
qplot(log(z1), log(y), color = SA$Strategy)
log_Errors <- log(z1)
log_latency <- log(y)
qplot(log_Errors, log_latency, color = SA$Strategy)
qplot(log_Errors, log_latency, color = SA$Strategy, geom = c("point", "smooth"))
qplot(log_Errors, log_latency, color = SA$Strategy, geom = c("smooth"))
qplot(log_Errors, log_latency, color = SA$Strategy, geom = c("points"))
qplot(displ, hwy, data = mpg, geom = c("points", "smooth"))
qplot(displ, hwy, data = mpg, geom = c("points", "smooth"))
qplot(log_Errors, log_latency, color = SA$Strategy, geom = c("point"))
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(log_Errors, color = SA$Strategy)
qplot(log_latency, color = SA$Strategy)
qplot(log_latency, fill = SA$Strategy)
qplot(displ, data = mpg, fill = drv)
qplot(log_latency, facets = SA$Strategy)
qplot(displ, hwy, data = mpg, facets = .~ drv)
qplot(log_latency, facets = .~ Strategy)
qplot(log_latency, data=SA, facets = .~ Strategy)
qplot(displ, data = mpg, facet = drv ~., binwidth = 2)
qplot(displ, data = mpg, facets = drv ~., binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~., binwidth = 2)
qplot(log_latency, data=SA, facets = Strategy ~. )
qplot(log_latency, data=SA, facets = SA$Strategy ~. )
qplot(log_latency, data=SA, facets = SA$Strategy ~ . )
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
testdat <- data.fram(x = 1:100, y= rnorm(100))
testdat[50,2] <- 100
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
testdat <- data.fram(x = 1:100, y= rnorm(100))
testdat <- data.frame(x = 1:100, y= rnorm(100))
testdat[50,2] <- 100
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x=x, y=y))
g+geom_line()
g+geom_line() + lim(-3,3)
g+geom_line() + ylim(-3,3)
g+geom_line() + coord_cartesian(ylim(-3,3))
g+geom_line() + coord_cartesian(ylim = c(-3,3))
setwd("./data/EDA2/")
NEI <- readRDS("summarySCC_PM25.rds")
head(NEI)
df <- ddply(NEI,.(type),summarize,sum=ave(year,FUN=mean))
library(dplyr)
df <- ddply(NEI,.(type),summarize,sum=ave(year,FUN=mean))
library(reshape2)
df <- ddply(NEI,.(type),summarize,sum=ave(year,FUN=mean))
library(plyr)
df <- ddply(NEI,.(type),summarize,sum=ave(year,FUN=mean))
df
head(df)
head(NEI)
df <- ddply(NEI,.(type),summarize,sum=mean(year))
head(df)
df <- ddply(NEI,.(type),summarize,mean(year))
head(df)
df <- dcast(NEI, year ~ type,mean)
head(df)
df <- dcast(NEI, type ~ year,mean)
head(df)
df <- melt(NEI,id=c("type","year"),measure.vars=c("Emissions"))
head(df)
str(df)
df_m <- tapply(df$Emissions,year, mean)
df_m <- tapply(df$Emissions, df$year, mean)
df_m
spdf <- split(df$Emissions, df$type)
spdf <- split(df$type, df$Emissions)
spdf <- split(df$value, df$type)
str(spdf)
head(spdf)
mndf <- lapply(spdf, mean)
mndf
str(df)
head(df)
spdf <- split(NEI$point)
spdf <- split(NEI$type, df$Emissions)
spdf <- split(NEI$type, NEI$Emissions)
spdf
tbl_df(NEI)
df <- ddply(NEI, c("type", "year"), summarise,
mean = mean(Emissions))
df
rm(spdf)
rm(mndf)
df
qplot(Emissions, year, data = df, facets = . ~ type)
library(ggplot2)
qplot(Emissions, year, data = df, facets = . ~ type)
qplot(mean, year, data = df, facets = . ~ type)
qplot(year, mean, data = df, facets = . ~ type)
g <- qplot(year, mean, data = df, facets = . ~ type)
abline(lm(df$mean ~ df$year), col="red", lwd=5)
qplot(year, mean, data = df, facets = . ~ type)
abline(lm(df$mean ~ df$year), col="red", lwd=5)
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR103/008/SRR1039508/SRR1039508_1.fastq.gz
qplot(year, log(mean), data = df, facets = . ~ type)
g <- qplot(year, log10(mean), data = df, facets = . ~ type)
qplot(year, log10(mean), data = df, facets = . ~ type)
qplot(year, log(mean), data = df, facets = . ~ type)
g <- qplot(year, log(mean), data = df, facets = . ~ type)
g + theme(axis.text.x = element_text(angle = 45, hjust = 1))
